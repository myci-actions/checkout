name: 'checkout github repo'
description: 'Clone github repo and checkout commit'
branding:
  icon: 'archive'
  color: 'green'
inputs:
  submodules:
    description: 'Init submodules, can be true, false, remote, recursive, remote_recursive.'
    required: false
    default: remote_recursive
  url:
    description: 'Clone from this given https URL. If empty, then current repo is cloned.'
    required: false
    default:
  dir:
    description: "Destination direcotry. The destination directory will be created if doesn't exist. If empty, will clone to directory named same as the repo."
    required: false
    default: .
runs:
  using: "composite"
  steps:
    - name: clean
      run: |
        echo "clean"
        # NOTE: ls on macosx does not support long names of keys, e.g. --almost-all
        for f in $(ls -A); do
          rm -rf $f
        done
      shell: bash
    - name: clone repo
      run: |
        # On github public runners the current directory is owned by some other user.
        # To avoid git unsafe repository error, add current directory as a safe one to git config.
        git config --global --add safe.directory $(pwd)
        
        # set credentials using "GIT_ASKPASS" to avoid the token to present in output of "git remote -v"
        echo "#!/bin/bash\necho ${{ github.token }}" > ~/git_askpass.sh
        chmod +x ~/git_askpass.sh

        if [ -z "${{ inputs.url }}" ]; then
          # no clone URL is given, clone current repository

          echo "clone to ${{ inputs.dir }}"
        
          GIT_ASKPASS=~/git_askpass.sh git clone --quiet https://github.com/${{ github.repository }} ${{ inputs.dir }}
        
          ref_type=$(echo ${{ github.ref }} | sed -E -n -e 's/^refs\/([^/]*)\/.*$/\1/p')
          ref=$(echo ${{ github.ref }} | sed -E -n -e 's/^refs\/[^/]*\/(.*)$/\1/p')

          echo "ref = $ref"
          echo "ref_type = $ref_type"

          case $ref_type in
            pull)
              echo "ref is a pull request, fetch it"
              git fetch origin +refs/pull/$ref:refs/remotes/origin/pull/$ref
              ref="origin/pull/$ref"
              ;;
            *)
              echo "use commit sha as ref"
              ref=${{ github.sha }}
              ;;
          esac

          echo "checkout $ref"
          pushd ${{ inputs.dir }}
          git checkout $ref
          popd
        else
          # clone URL is explicitly given, clone it
          echo "clone from ${{ inputs.url }} to ${{ inputs.dir }}"

          GIT_ASKPASS=~/git_askpass.sh git clone --quiet ${{ inputs.url }} ${{ inputs.dir }}
        fi

        if [ "${{ inputs.submodules }}" != "false" ] && [ -f ".gitmodules" ]; then
          if [ "${{ inputs.submodules }}" == "remote" ]; then
            remote=--remote
            recursive=
          elif [ "${{ inputs.submodules }}" == "recursive" ]; then
            remote=
            recursive=--recursive
          elif [ "${{ inputs.submodules }}" == "remote_recursive" ]; then
            remote=--remote
            recursive=--recursive
          else
            remote=
            recursive=
          fi

          echo "clone submodules"
          # replace ssh to https in .gitmodules
          # NOTE: $ in front of sed's expression string is needed to make macosx treat \t as tab characters, then also \1 needs to be \\1
          sed -E -i -e $'s/^[ \t]*url[ \t]*=[ \t]*git@github.com:([^\/]*\/[^\/]*)[ \t]*$/\turl = https:\/\/${{ github.token }}@github.com\/\\1/g' .gitmodules
          git submodule init
          git submodule update $remote $recursive
        fi
      shell: bash
